<div>
  <div class="contents">
    <div class="container">
      <Navigation />
      <div class="header-block">
        <p class="typography.body-text">
          March,13 2019
        </p>
        <h1 class="typography.display">
          Elixir Umbrella Applications and Testing with Mox
        </h1>
        <p class="typography.lead">
          What’s the big deal with Elixir umbrellas?
          An Elixir umbrella is a container for mix apps; a structure useful to separate the application’s concerns as each app is contained within its own mix project.
          Why is this cool?
          Because it’s like Lego and Lego is cool.
          Who’s Mox you ask?
          Mox is cool too… Let’s dive in!
        </p>
      </div>
      <!--page-header-->
    </div>
    <!--container-->
    <div class="container">
      <div class="main-block">
        <div class="main-block.content">
          <div class="main-block.content-item">
            <div class="main-block.content-section">
              <div class="main-block.content-section-item">
                <h3 class="typography.sub-heading">
                  Breethe
                </h3>
                <p class="typography.body-text">
                  Throughout this post, we will use Breethe as an example. Breethe is a Progressive Web App that gives users quick and easy access to air quality data for locations around the world. Pollution and global warming are getting worse. The first step to understanding and solving these problems is to raise awareness by providing everyone with easy access to accurate data.
                </p>
                <div class="main-block.body-image">
                  <img class="main-block.image-centered" src="/assets/images/breethe-video.webp" />
                </div>
                <p class="typography.body-text">
                  The application is open source and we encourage everyone interested to look through the source for reference. The server for this application was implemented using an Elixir umbrella application which will be the focus of this post. The client for Breethe was built with Glimmer.js, which we discussed in previous posts:
                </p>
                <ul class="list">
                  <li class="list.item">
                    <a class="typography.link" href="#">
                      From SPA to PWA
                    </a>
                  </li>
                  <li class="list.item">
                    <a class="typography.link" href="#">
                      Building a PWA with Glimmer.js
                    </a>
                  </li>
                </ul>
                <ol class="list">
                  <li class="list.item-ordered">
                    <a class="typography.link" href="#">
                      From SPA to PWA
                    </a>
                  </li>
                  <li class="list.item-ordered">
                    <a class="typography.link" href="#">
                      Building a PWA with Glimmer.js
                    </a>
                  </li>
                </ol>
                <h3 class="typography.sub-heading">
                  Umbrella applications and separating concerns
                </h3>
                <p class="typography.body-text">
                  When we first started building Breethe, we asked ourselves a simple question which would dictate the structure of the application and our motivation for using an umbrella app to organise our code. This question was: what if we want to change our air quality data provider? It turns out this wasn’t just speculation as we are now in the process of doing just that and our decision to use an umbrella app will make the process tremendously easy.
                </p>
                <pre class="main-block.code">
                  <code>
                    # apps/breethe/lib/breethe.ex
                  </code>
                </pre>
                <p class="typography.body-text">
                  We have defined a clear boundary between the business logic and the webserver. This is cool because the umbrella becomes modular like Lego and who doesn’t like Lego? Need to change the air quality data provider? No problem, simply change the data application, leaving the webserver untouched as long as the data app continues to implement the same interface. The same would work the other way round if we wanted to change the webserver.
                </p>
                <table class="table">
                  <tr>
                    <th class="table.header">
                      Test
                    </th>
                    <th class="table.header">
                      Test
                    </th>
                    <th class="table.header">
                      Test
                    </th>
                  </tr>
                  <tr>
                    <td class="table.cell">
                      Test
                    </td>
                    <td class="table.cell">
                      Test
                    </td>
                    <td class="table.cell">
                      Test
                    </td>
                  </tr>
                </table>
                <p class="typography.body-text">
                  However, for this approach to work well, the APIs used to communicate between the different applications in the umbrella need to be carefully defined. We want to keep the interfaces as little as possible to keep complexity contained. As an example, here are the publicly available functions on the breethe app in the umbrella:
                </p>
                <div class="main-block.body-image">
                  <img class="main-block.image-centered" src="/assets/images/test-image.png" />
                  <p class="main-block.body-image-caption">
                    This is a caption for the image
                  </p>
                </div>
              </div>
            </div>
            <!--section-->
          </div>
        </div>
        <div class="main-block.sidebar">
          <p class="typography.small-text">
            About the Author
          </p>
          <div class="card">
            <div class="card.image">
              <img class="fluid-image.image-cover" src="/assets/images/nlong.jpg" />
            </div>
            <h3 class="card.sub-heading">
              Niklas Long
            </h3>
            <p class="card.text">
              Working as contributor on multiple Phoenix and Ember web applications.
            </p>
            <a class="typography.link" href="https://twitter.com/niklas_long?lang=en">
              @niklas_long
            </a>
          </div>
          <p class="typography.small-text">
            About Simplabs
          </p>
          <div class="card">
            <img class="logo" src="/assets/images/neu.svg" />
            <p class="card.text">
              simplabs is a Web Engineering Consultancy based in Munich, Germany. We work for clients all over the world, offering Software Engineering, Technology Consulting as well as Individual and Group Training with modern Web Technologies. We specialize in a set of conventions-based tools like Ember.js, Elixir and, Phoenix as well as Ruby on Rails and like to move fast without breaking things.
            </p>
            <a class="typography.arrow-link" href="/about">
              Learn more about Simplabs
            </a>
          </div>
        </div>
        <!--sidebar-->
      </div>
    </div>
    <div class="container">
      <BlogRelatedArticle />
    </div>
    <!--container-->
    <div class="container">
      <WorkWithUs />
    </div>
    <div class="container">
      <Footer />
    </div>
  </div>
  <!--contents-->
</div>